###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           15/Mar/2017  17:19:47
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  regvar
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c
#    Command line  =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c -lcN
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\List -o
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430G2332__ -e --double=32 --regvar_r4 --dlib_config "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430fn.h"
#        -I ..\ -I .\ -On
#    List file     =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\List\main.lst
#    Object file   =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\Obj\main.r43
#
###############################################################################

E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c
      1          /**********************************************************************************
      2           *
      3           *      ASD-10QR MAIN routine
      4           * 
      5           **********************************************************************************
      6           * FileName:        main.c
      7           * Version:			1.00
      8           *
      9           * Processor:       MSP430G2xxx
     10           * Complier:        IAR Workbench for MSP430 v4.50 or higher
     11           *                  
     12           * Company:         ARTON
     13           *
     14           * Software License Agreement
     15           *
     16           * The software supplied herewith by ARTON Incorporated
     17           * (the "Company") for its devices is intended and
     18           * supplied to you, the Company's customer, for use solely and
     19           * exclusively on ARTON Inc products. The
     20           * software is owned by the Company and/or its Author, and is
     21           * protected under applicable copyright laws. All rights are reserved.
     22           * Any use in violation of the foregoing restrictions may subject the
     23           * user to criminal sanctions under applicable laws, as well as to
     24           * civil liability for the breach of the terms and conditions of this
     25           * license.
     26           *
     27           * THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION. NO WARRANTIES,
     28           * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
     29           * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
     30           * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
     31           * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
     32           * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
     33           *
     34           *
     35           * Author               Date      	Version	  		Comment
     36           *--------------------------------------------------------------------------------
     37           * Oleg Semeniuk	 16.01.2014    	1.00		Release for v1.00
     38           *
     39           *********************************************************************************/
     40          
     41          
     42          /*********************************************************************************/
     43          /*                                 INCLUDES                                      */
     44          /*********************************************************************************/
     45          
     46          
     47          #include <stdio.h>                    /* standard I/O .h-file                */
     48          #include <string.h>                   /* string and memory functions         */
     49          
     50          
     51          #include  "main.h"
     52          
     53          
     54          
     55          /*********************************************************************************/
     56          /*                                 VARIABLES                                     */
     57          /*********************************************************************************/
     58          
     59          __regvar __no_init tFlags 	f 	 @ __R4; 	// Set of state machine flags
     60          
     61          //
     62          u16		timerMain;					// Текущее значение главного таймера
     63          u16		mainPeriodCounter;			// Counter of main time period
     64          u8 		DeviceMode; 				// Mode of device
     65          
     66          tFault	DeviceFault = {0};			// Current Faults flags
     67          
     68          u8 		Timer50msCounter = 0;		// Counter of 50ms ticks
     69          /*
     70          volatile u32	led_r;
     71          volatile u32	led_y;
     72          volatile u32	led_sh = 0;
     73          */
     74          u8 		fTimerA1_On = 0;
     75          u8 		timerA1_blank = 0;
     76          tCfgReg	cfg_reg;
     77          u8	jp1_state = 0;	// 0 - JP1 Open, 1 - JP1 Close
     78          
     79          u8	adc_process = 0;		// ADC low level semafore
     80          u16	light_timer = 1;	// For led lighting
     81          
     82          u8	sync_timer = SYNC_PERIOD;		// For led lighting syncronisation
     83          u8	ir_timer  = IR_TIMEOUT;
     84          
     85          /*********************************************************************************/
     86          /*                                FUNCTIONS                                      */
     87          /*********************************************************************************/
     88          // --- Declarations ---
     89          
     90          //u16  AverageData(u16 * data_ptr, u8 len);
     91          //u8   RX_PacketParser(void);
     92          //void ADC_Measure(u16 ch, u16 refout, u8 count);
     93          //void ADC_Measure_TEMP(u16 ch, u16 refout, u8 count);
     94          
     95          
     96          void JP1_Define(void);
     97          
     98          
     99          
    100          
    101          //--------------------------------------------------------------------------------
    102          // Function		: void DeviceStart(void)
    103          // Parameters	: None
    104          // Return		: None
    105          // Description	: Function executes initialization variable at start of device
    106          //--------------------------------------------------------------------------------
    107          void DeviceStart(void) {
    108          
    109          	DeviceFault.byte = 0;		// Reset faults flags
    110          	//		
    111          	VLO_TimerCalibr();			// Calibration VLO Timer
    112          	//
    113          }
    114          
    115          
    116          //--------------------------------------------------------------------------------
    117          // Function		: void LedValueManager(void)
    118          // Parameters	: None
    119          // Return		: None
    120          // Description	: 
    121          //--------------------------------------------------------------------------------
    122          void LedValueManager(void) {
    123            /*
    124          	if (DeviceFault.byte) {
    125          		DeviceMode = MODE_FAULT;
    126          		led_r = 0;
    127          		
    128          		if (DeviceFault.fELStrobNone) {
    129          			// Electrical sync is fault
    130          			led_y = LED_PULSE_3;
    131          		}else
    132          		if (DeviceFault.fSignal_Hi) {
    133          			// Level signal is big
    134          			led_y = LED_PULSE_2;
    135          		}else
    136          		if (DeviceFault.fSignal_Low) {
    137          			// Level signal is big
    138          			led_y = LED_PULSE_1;
    139          		}else	
    140          		if (DeviceFault.fFaultDrift) {
    141          			// Level signal is big
    142          			led_y = LED_PULSE_4;
    143          		}
    144          	}else{
    145          		if (DeviceMode == MODE_FAULT) {
    146          			DeviceMode = MODE_NORM;
    147          			led_r = 0;
    148          			led_y = 0;
    149          		}
    150          	}
    151            */
    152          }
    153          
    154          //========================================================
    155          //                 ---  M A I N  ----
    156          //========================================================
    157          //--------------------------------------------------------------------------------
    158          // Function		: void main(void)
    159          // Parameters	: None
    160          // Return		: None
    161          // Description	: Main function. Contains main loop.
    162          //--------------------------------------------------------------------------------
    163          void main(void) {
    164          	u8	ir_num;
    165          //	u16	led_timer = 0;
    166          	// Initialization variables and GPIO
    167          	
    168          	WDTCTL = WDTPW + WDTHOLD;				// отключаем сторожевой таймер
    169          	
    170          	BCSCTL1 = CALBC1_1MHZ; 						// Init internal RC osc.
    171          	DCOCTL =  CALDCO_1MHZ;						// Используем частоту 1 MГц0.
    172          	__set_R4_register(0);							
    173          	
    174          	// Initialization code for VLO
    175          		BCSCTL3 |= LFXT1S_2;                    // Select VLO for low freq clock, capacitor off
    176          	
    177          	WDTCTL = WDT_ADLY_250;                   	// Interval timer	/* for 50 ms */
    178          	IE1 |= WDTIE|NMIIE;                           	// Enable WDT interrupt
    179          
    180          	_BIS_SR(GIE);    					// Interrupt enable
    181          	__bis_SR_register(LPM3_bits);
    182          	_BIC_SR(GIE);	
    183          
    184          	//	WDTCTL = WDTPW + WDTHOLD;				// отключаем сторожевой таймер
    185          	if (IFG1 & WDTIFG) {
    186          		// Reset WDT
    187          		#if (SYS_FAULT_ENABLE == 1)
    188          		DeviceFault.fFaultSWReset = 1;
    189          		#endif
    190          	}
    191          	IFG1 = 0;
    192          	
    193          	DelayMs(3000);
    194          	
    195          	GPIO_Init();										// GIPIO Init
    196          	
    197          //	Led_Flash(10);
    198          	DelayMs(300);
    199          //	Led_Flash(10);
    200          
    201          	
    202          	_BIS_SR(GIE);    					// Interrupt enable
    203          	DeviceStart();						// Calibration VLO Timer
    204          
    205          	cfg_reg = CONFIG->config_reg;
    206          	
    207          	SysTimerInit();
    208          	
    209          	
    210          // *****************************************************************
    211          // ******************   M A I N   L O O P  *************************
    212          // *****************************************************************
    213          	while(1) {
    214          //-------------------------------------------------------------------------------
    215          		//
    216          		// ******** Обработчики событий ********
    217          		//
    218          //-------------------------------------------------------------------------------
    219          		
    220          //-------------------------------------------------------------------------------
    221          // old TimerA0 Event		
    222          //-------------------------------------------------------------------------------
    223          /*
    224          		if (fTimerA_On) {				// Получен следующий интервал timer
    225          			fTimerA_On = 0;
    226          			
    227          			BCSCTL1 = CALBC1_16MHZ; 					// Используем частоту 8 MГц
    228          			DCOCTL =  CALDCO_16MHZ;
    229          			//
    230          			TA1CCR0  = 16 * SYS_TICK_TIME - 1;   	// Period T(us) * F(MHz)
    231          			//
    232          			
    233          			_BIC_SR(GIE);    			// Запрещаем прерывания
    234          			Timer_A_Off();
    235          			_BIS_SR(GIE);    			// Разрешаем прерывания
    236          			
    237          			//TEST2_CLR();
    238          			
    239          			timerA1_blank = 4;
    240          			
    241          		}
    242          */
    243          //-------------------------------------------------------------------------------
    244          // fTimer50msOn Event				
    245          //-------------------------------------------------------------------------------
    246          		if (fTimer50msOn) {		// Получен следующий 50мс интервал
    247          			fTimer50msOn = 0;
    248          			//
    249          			Timer50msCounter = 0;
    250          
    251          		}
    252          		
    253          //-------------------------------------------------------------------------------
    254          // fIrTimerOn Event				
    255          //-------------------------------------------------------------------------------
    256          		if(fIrTimerOn)
    257          			{
    258          //				if(ir_timer--);
    259          //				else
    260          //				{
    261          
    262          					fIrTimerOn = 0;
    263          					for(ir_num = 0; ir_num < IR_PULSES; ir_num++)
    264          					{
    265          						IRED_SET();
    266          						DelayUs(IR_DUTY);
    267          						IRED_CLR();
    268          						DelayUs(IR_PAUSE);
    269          					}
    270          			}
    271          		
    272          		
    273          //-------------------------------------------------------------------------------
    274          // TimerA0 SysTick
    275          //-------------------------------------------------------------------------------
    276          		
    277          		if (fTimerA_On) {				// Получен следующий интервал timer
    278          			fTimerA_On = 0;
    279          			
    280          			if(sync_timer--)
    281          			{
    282          				fStartPulse = 0;
    283          			}
    284          			else
    285          			{
    286          				fStartPulse = 1;					//enable sync pulse
    287          				sync_timer = SYNC_PERIOD;
    288          			}
    289          			
    290          			if(fStartPulse)
    291          			{
    292          				fStartPulse =0;
    293          				
    294          
    295          				LN_SYNC_SET();	
    296          //				IRED_SET();
    297          //				IR_SYNC_SET();
    298          				DelayUs(100);
    299          				LN_SYNC_CLR();
    300          				IR_SYNC_CLR();
    301          				IRED_CLR();
    302          				
    303          //				ir_timer  = IR_TIMEOUT;
    304          				T0_delay();
    305          //				fIrTimerOn = 1;
    306          			}
    307          	
    308          			
    309          //	Indication update			
    310          			RED_CLR();
    311          			YEL_CLR();			
    312          			if (timerA1_blank) 
    313          			{
    314          				timerA1_blank--;
    315          			}
    316          			else
    317          			{
    318          				timerA1_blank = 100;
    319          
    320          				// Indication
    321          				//
    322          				if (light_timer--) 
    323          				{
    324          						RED_SET();
    325          				}
    326          				else
    327          				{
    328          					light_timer = 1;
    329          						RED_CLR();
    330          						YEL_CLR();
    331          				}
    332          			}
    333          
    334          //	end of Indication update
    335          		}//fTimerA_On
    336          
    337          	} // while(1)
    338          }//main
    339          
    340          
    341          //--------------------------------------------------------------------------------
    342          // Function		: __interrupt void watchdog_timer (void)
    343          // Parameters	: None
    344          // Return		: None
    345          // Description	: WDT Interrupt routine
    346          //--------------------------------------------------------------------------------
    347          #pragma vector=WDT_VECTOR
    348          __interrupt void watchdog_timer (void) {
    349          	
    350          	if (fTimer50msOn) {
    351          		if (++Timer50msCounter == 0) {		// > ~ 12sec
    352          			//!!!WDTCTL = WDTCTL;				// Hardware RESET
    353          		}
    354          	}
    355          	fTimer50msOn = 1;
    356          	
    357          
    358          	
    359          	__bic_SR_register_on_exit(LPM3_bits);                   // Clear LPM3 bits from 0(SR)
    360          }
    361          
    362          
    363          
    364          
    365          //--------------------------------------------------------------------------------
    366          // Function		: void Led_Flash(u16 duration)
    367          // Parameters	: duration - duration Red LED flash in ms
    368          // Return		: None
    369          // Description	: Flashing red LED
    370          //--------------------------------------------------------------------------------
    371          void Led_Flash(u16 duration) {
    372          	RED_SET();
    373          	DelayMs(duration);
    374          	RED_CLR();
    375          }
    376          
    377          //--------------------------------------------------------------------------------
    378          // Function		: void ADC10_ISR(void)
    379          // Parameters	: None
    380          // Return		: None
    381          // Description	: ADC10 interrupt service routine
    382          //--------------------------------------------------------------------------------
    383          #pragma vector=ADC10_VECTOR
    384          __interrupt void ADC10_ISR(void) {
    385          
    386          	//ADC10AE0 &= ~0x0F;                      // Save only VRef Out
    387          	//adc_process = 0;
    388          	//fEndOfSamples = 1;
    389          	
    390          	//__bic_SR_register_on_exit(CPUOFF);      // Clear CPUOFF bit from 0(SR)
    391          	
    392          }
    393          
    394          //--------------------------------------------------------------------------------
    395          // Function		: void DeviceDiagnostics(void)
    396          // Parameters	: None
    397          // Return		: None
    398          // Description	: Procedure of the diagnostics device
    399          //--------------------------------------------------------------------------------
    400          void DeviceDiagnostics(void) {
    401          	
    402          	//
    403          #if (TEMP_DET_ENABLE == 1)
    404          //	ADC_Measure_TEMP(ADC_CH_TEMP, REFOUT, ADC_CH_DATA_LEN);
    405          //	tempC = AverageData(adc_data1, ADC_CH_DATA_LEN);
    406          #endif
    407          	
    408          	// Diagnostic BOOST	
    409          	//
    410          //	DelayMs(100);
    411          	//
    412          	//
    413          		
    414          #if (CRC_ENABLE == 1)
    415          	// Check CS of Memory
    416          	DeviceFault.fFaultCRC = 0;
    417          	if (GetPropertiesCS() != CONFIG->CS) {
    418          		DeviceFault.fFaultCRC = 1;
    419          	}
    420          #endif
    421          }
    422          
    423          //--------------------------------------------------------------------------------
    424          // Function		: void u8 JP1_Define(void)
    425          // Parameters	: None
    426          // Return		: 0 - JP1 Open, 1 - JP1 Close
    427          // Description	: Definition of JP1 state
    428          //--------------------------------------------------------------------------------
    429          void JP1_Define(void) {
    430          /*	u16 buf[4];
    431          	u16 res;
    432          	
    433          	res = ADC_Measure_Simple(ADC_BUT, buf, 4);
    434          	
    435          	if (res > 600) return; 
    436          	if (res > 100) {
    437          		jp1_state = 0;		// JP1 is Open 
    438          	}else{
    439          		jp1_state = 1;		// JP1 is Close
    440          	}	
    441          */
    442                  
    443          	return;	
    444          }
    445          
    446          
    447          // End of main.c

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   ADC10_ISR
      2   DeviceDiagnostics
        2   -> GetPropertiesCS
      2   DeviceStart
        0   -> VLO_TimerCalibr
      2   JP1_Define
      2   LedValueManager
      4   Led_Flash
        4   -> DelayMs
      2   main
        2   -> DelayMs
        2   -> DelayUs
        2   -> DeviceStart
        2   -> GPIO_Init
        2   -> SysTimerInit
        2   -> T0_delay
      4   watchdog_timer


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for ir_timer>
       2  ?<Initializer for light_timer>
       1  ?<Initializer for sync_timer>
       2  ADC10_ISR
       2  ADC10_ISR::??INTVEC 10
       1  BCSCTL1
       1  BCSCTL3
       1  CALBC1_1MHZ
       1  CALDCO_1MHZ
       1  DCOCTL
      24  DeviceDiagnostics
       1  DeviceFault
       1  DeviceMode
       8  DeviceStart
       1  IE1
       1  IFG1
       2  JP1_Define
       2  LedValueManager
      22  Led_Flash
       1  P1OUT
       1  P2OUT
       1  Timer50msCounter
       2  WDTCTL
       1  adc_process
       2  cfg_reg
       2  f
       1  fTimerA1_On
       1  ir_timer
       1  jp1_state
       2  light_timer
     332  main
       2  mainPeriodCounter
       1  sync_timer
       1  timerA1_blank
       2  timerMain
      18  watchdog_timer
       2  watchdog_timer::??INTVEC 20

 
 410 bytes in segment CODE
  11 bytes in segment DATA16_AN
   4 bytes in segment DATA16_I
   4 bytes in segment DATA16_ID
  13 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
   2 bytes in segment REGVAR_AN
 
 410 bytes of CODE     memory
   4 bytes of CONST    memory (+  4 bytes shared)
  17 bytes of DATA     memory (+ 11 bytes shared)
   0 bytes of REGISTER memory (+  2 bytes shared)

Errors: none
Warnings: 1
