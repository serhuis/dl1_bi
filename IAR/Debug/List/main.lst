###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           10/Mar/2017  17:43:39
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  regvar
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c
#    Command line  =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c -lcN
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\List -o
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430G2332__ -e --double=32 --regvar_r4 --dlib_config "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430fn.h"
#        -I ..\ -I .\ -On
#    List file     =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\List\main.lst
#    Object file   =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\Obj\main.r43
#
###############################################################################

E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c
      1          /**********************************************************************************
      2           *
      3           *      ASD-10QR MAIN routine
      4           * 
      5           **********************************************************************************
      6           * FileName:        main.c
      7           * Version:			1.00
      8           *
      9           * Processor:       MSP430G2xxx
     10           * Complier:        IAR Workbench for MSP430 v4.50 or higher
     11           *                  
     12           * Company:         ARTON
     13           *
     14           * Software License Agreement
     15           *
     16           * The software supplied herewith by ARTON Incorporated
     17           * (the "Company") for its devices is intended and
     18           * supplied to you, the Company's customer, for use solely and
     19           * exclusively on ARTON Inc products. The
     20           * software is owned by the Company and/or its Author, and is
     21           * protected under applicable copyright laws. All rights are reserved.
     22           * Any use in violation of the foregoing restrictions may subject the
     23           * user to criminal sanctions under applicable laws, as well as to
     24           * civil liability for the breach of the terms and conditions of this
     25           * license.
     26           *
     27           * THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION. NO WARRANTIES,
     28           * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
     29           * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
     30           * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
     31           * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
     32           * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
     33           *
     34           *
     35           * Author               Date      	Version	  		Comment
     36           *--------------------------------------------------------------------------------
     37           * Oleg Semeniuk	 16.01.2014    	1.00		Release for v1.00
     38           *
     39           *********************************************************************************/
     40          
     41          
     42          /*********************************************************************************/
     43          /*                                 INCLUDES                                      */
     44          /*********************************************************************************/
     45          
     46          
     47          #include <stdio.h>                    /* standard I/O .h-file                */
     48          #include <string.h>                   /* string and memory functions         */
     49          
     50          
     51          #include  "main.h"
     52          
     53          
     54          
     55          /*********************************************************************************/
     56          /*                                 VARIABLES                                     */
     57          /*********************************************************************************/
     58          
     59          __regvar __no_init tFlags 	f 	 @ __R4; 	// Set of state machine flags
     60          
     61          //
     62          u16		timerMain;					// Текущее значение главного таймера
     63          u16		mainPeriodCounter;			// Counter of main time period
     64          u8 		DeviceMode; 				// Mode of device
     65          
     66          tFault	DeviceFault = {0};			// Current Faults flags
     67          u16		tempC;						// Current temperature in deg C
     68          
     69          u8 		Timer50msCounter = 0;		// Counter of 50ms ticks
     70          
     71          volatile u32	led_r;
     72          volatile u32	led_y;
     73          volatile u32	led_sh = 0;
     74          
     75          u8 		fTimerA1_On = 0;
     76          u8 		timerA1_blank = 4;
     77          
     78          //const u8 fault_sequence[4 * 2] = {MODE_FAULT, 10, MODE_NORM, 5, MODE_FIRE, 0, 0};	// 0 = ~~
     79          
     80          u8	reference;
     81          tCfgReg	cfg_reg;
     82          
     83          u8	jp1_state = 0;	// 0 - JP1 Open, 1 - JP1 Close
     84          
     85          u8	adc_process = 0;		// ADC low level semafore
     86          
     87          u16	light_timer = 0;	// For led lighting
     88          
     89          u8	light_sync = 0;		// For led lighting syncronisation
     90          
     91          
     92          /*********************************************************************************/
     93          /*                                FUNCTIONS                                      */
     94          /*********************************************************************************/
     95          // --- Declarations ---
     96          
     97          //u16  AverageData(u16 * data_ptr, u8 len);
     98          //u8   RX_PacketParser(void);
     99          //void ADC_Measure(u16 ch, u16 refout, u8 count);
    100          //void ADC_Measure_TEMP(u16 ch, u16 refout, u8 count);
    101          
    102          
    103          void JP1_Define(void);
    104          
    105          
    106          
    107          
    108          //--------------------------------------------------------------------------------
    109          // Function		: void DeviceStart(void)
    110          // Parameters	: None
    111          // Return		: None
    112          // Description	: Function executes initialization variable at start of device
    113          //--------------------------------------------------------------------------------
    114          void DeviceStart(void) {
    115          
    116          	DeviceFault.byte = 0;		// Reset faults flags
    117          	//		
    118          	VLO_TimerCalibr();			// Calibration VLO Timer
    119          	//
    120          }
    121          
    122          
    123          //--------------------------------------------------------------------------------
    124          // Function		: void LedValueManager(void)
    125          // Parameters	: None
    126          // Return		: None
    127          // Description	: 
    128          //--------------------------------------------------------------------------------
    129          void LedValueManager(void) {
    130            /*
    131          	if (DeviceFault.byte) {
    132          		DeviceMode = MODE_FAULT;
    133          		led_r = 0;
    134          		
    135          		if (DeviceFault.fELStrobNone) {
    136          			// Electrical sync is fault
    137          			led_y = LED_PULSE_3;
    138          		}else
    139          		if (DeviceFault.fSignal_Hi) {
    140          			// Level signal is big
    141          			led_y = LED_PULSE_2;
    142          		}else
    143          		if (DeviceFault.fSignal_Low) {
    144          			// Level signal is big
    145          			led_y = LED_PULSE_1;
    146          		}else	
    147          		if (DeviceFault.fFaultDrift) {
    148          			// Level signal is big
    149          			led_y = LED_PULSE_4;
    150          		}
    151          	}else{
    152          		if (DeviceMode == MODE_FAULT) {
    153          			DeviceMode = MODE_NORM;
    154          			led_r = 0;
    155          			led_y = 0;
    156          		}
    157          	}
    158            */
    159          }
    160          
    161          //========================================================
    162          //                 ---  M A I N  ----
    163          //========================================================
    164          //--------------------------------------------------------------------------------
    165          // Function		: void main(void)
    166          // Parameters	: None
    167          // Return		: None
    168          // Description	: Main function. Contains main loop.
    169          //--------------------------------------------------------------------------------
    170          void main(void) {
    171          //	u8	led_clk;
    172          //	u16	led_timer = 0;
    173          	// Initialization variables and GPIO
    174          	
    175          	WDTCTL = WDTPW + WDTHOLD;				// отключаем сторожевой таймер
    176          
    177          	GPIO_Init();										// GIPIO Init
    178          		
    179          
    180          	BCSCTL1 = CALBC1_1MHZ; 						// Init internal RC osc.
    181          	DCOCTL =  CALDCO_1MHZ;						// Используем частоту 1 MГц
    182          
    183          	__set_R4_register(0);							
    184          	
    185          	// Initialization code for VLO
    186          		BCSCTL3 |= LFXT1S_2;                    // Select VLO for low freq clock, capacitor off
    187          	// End initialization code
    188          	
    189          	
    190          	WDTCTL = WDT_ADLY_250;                   	// Interval timer	/* for 50 ms */
    191          	IE1 |= WDTIE;                           	// Enable WDT interrupt
    192          	//
    193          	//fLPM3 = 1;								// Enable LOW power mode
    194          	//
    195          	
    196          	if (IFG1 & WDTIFG) {
    197          		// Reset WDT
    198          		#if (SYS_FAULT_ENABLE == 1)
    199          		DeviceFault.fFaultSWReset = 1;
    200          		#endif
    201          	}
    202          	IFG1 = 0;
    203          	//	
    204          	DeviceMode = MODE_NORM;
    205          	
    206          	DelayMs(1000);
    207          	
    208          	Led_Flash(10);
    209          	DelayMs(300);
    210          	Led_Flash(10);
    211          	
    212          	DelayMs(3000);
    213          	
    214          	_BIS_SR(GIE);    					// Interrupt enable
    215          	DeviceStart();						// Calibration VLO Timer
    216          
    217          	cfg_reg = CONFIG->config_reg;
    218          	
    219          	SysTimerInit();
    220          	
    221          	
    222          // *****************************************************************
    223          // ******************   M A I N   L O O P  *************************
    224          // *****************************************************************
    225          	while(1) {
    226          //-------------------------------------------------------------------------------
    227          		//
    228          		// ******** Обработчики событий ********
    229          		//
    230          //-------------------------------------------------------------------------------
    231          		
    232          //-------------------------------------------------------------------------------
    233          // TimerA0 Event		
    234          //-------------------------------------------------------------------------------
    235          /*
    236          		if (fTimerA_On) {				// Получен следующий интервал timer
    237          			fTimerA_On = 0;
    238          			
    239          			BCSCTL1 = CALBC1_16MHZ; 					// Используем частоту 8 MГц
    240          			DCOCTL =  CALDCO_16MHZ;
    241          			//
    242          			TA1CCR0  = 16 * SYS_TICK_TIME - 1;   	// Period T(us) * F(MHz)
    243          			//
    244          			
    245          			_BIC_SR(GIE);    			// Запрещаем прерывания
    246          			Timer_A_Off();
    247          			_BIS_SR(GIE);    			// Разрешаем прерывания
    248          			
    249          			//TEST2_CLR();
    250          			
    251          			timerA1_blank = 4;
    252          			
    253          		}
    254          */
    255          //-------------------------------------------------------------------------------
    256          // fTimer50msOn Event				
    257          //-------------------------------------------------------------------------------
    258          		if (fTimer50msOn) {		// Получен следующий 50мс интервал
    259          			fTimer50msOn = 0;
    260          			//
    261          			Timer50msCounter = 0;
    262          
    263          		}
    264          		
    265          //-------------------------------------------------------------------------------
    266          // TimerA1 Event (SysTick)
    267          //-------------------------------------------------------------------------------
    268          		if (fTimerA_On) {				// Получен следующий интервал timer
    269          			fTimerA_On = 0;
    270          			
    271          			//TEST2_CLR();
    272          			//TEST2_OUT ^= TEST2_BIT;
    273          			
    274          			//
    275          /*
    276          			if (timerMain) {
    277          				timerMain--;
    278          				if (timerMain == 1) {
    279          					if (DeviceMode == MODE_TEST) {
    280          						DeviceMode = MODE_NORM;
    281          						RED_CLR();
    282          						YEL_CLR();
    283          					}
    284          				}
    285          			}
    286          */
    287          			
    288          			if (timerA1_blank) {
    289          				timerA1_blank--;
    290          			}else{
    291          
    292          				// Indication
    293          				//
    294          				if (light_timer) {
    295          //						RED_SET();
    296          			/*
    297          			if ((DeviceMode == MODE_NORM) || (DeviceMode == MODE_PREFIRE)) {
    298          						RED_SET();
    299          						YEL_CLR();
    300          					}else
    301          					//
    302          					if (DeviceMode == MODE_CALIBR) {
    303          						RED_SET();
    304          						YEL_SET();
    305          					}
    306          */
    307          					light_timer--;
    308          				}else{
    309          					//
    310          //					if ((DeviceMode == MODE_NORM) || (DeviceMode == MODE_CALIBR) || (DeviceMode == MODE_PREFIRE)) {
    311          						RED_CLR();
    312          						YEL_CLR();
    313          					}
    314          				}
    315          
    316          //			} // End indication
    317          			//
    318          			
    319          		} // if (fTimer50msOn)
    320          
    321          	} // while(1)
    322          }
    323          
    324          
    325          //--------------------------------------------------------------------------------
    326          // Function		: __interrupt void watchdog_timer (void)
    327          // Parameters	: None
    328          // Return		: None
    329          // Description	: WDT Interrupt routine
    330          //--------------------------------------------------------------------------------
    331          #pragma vector=WDT_VECTOR
    332          __interrupt void watchdog_timer (void) {
    333          	
    334          	if (fTimer50msOn) {
    335          		if (++Timer50msCounter == 0) {		// > ~ 12sec
    336          			//!!!WDTCTL = WDTCTL;				// Hardware RESET
    337          		}
    338          	}
    339          	fTimer50msOn = 1;
    340          
    341          	
    342          //	__bic_SR_register_on_exit(LPM3_bits);                   // Clear LPM3 bits from 0(SR)
    343          }
    344          
    345          
    346          
    347          
    348          //--------------------------------------------------------------------------------
    349          // Function		: void Led_Flash(u16 duration)
    350          // Parameters	: duration - duration Red LED flash in ms
    351          // Return		: None
    352          // Description	: Flashing red LED
    353          //--------------------------------------------------------------------------------
    354          void Led_Flash(u16 duration) {
    355          	RED_SET();
    356          	YEL_SET();
    357          	DelayMs(duration);
    358          	RED_CLR();
    359          	YEL_CLR();
    360          }
    361          
    362          //--------------------------------------------------------------------------------
    363          // Function		: void ADC10_ISR(void)
    364          // Parameters	: None
    365          // Return		: None
    366          // Description	: ADC10 interrupt service routine
    367          //--------------------------------------------------------------------------------
    368          #pragma vector=ADC10_VECTOR
    369          __interrupt void ADC10_ISR(void) {
    370          
    371          	//ADC10AE0 &= ~0x0F;                      // Save only VRef Out
    372          	adc_process = 0;
    373          	fEndOfSamples = 1;
    374          	
    375          	//__bic_SR_register_on_exit(CPUOFF);      // Clear CPUOFF bit from 0(SR)
    376          	
    377          }
    378          
    379          //--------------------------------------------------------------------------------
    380          // Function		: void DeviceDiagnostics(void)
    381          // Parameters	: None
    382          // Return		: None
    383          // Description	: Procedure of the diagnostics device
    384          //--------------------------------------------------------------------------------
    385          void DeviceDiagnostics(void) {
    386          	
    387          	//
    388          #if (TEMP_DET_ENABLE == 1)
    389          //	ADC_Measure_TEMP(ADC_CH_TEMP, REFOUT, ADC_CH_DATA_LEN);
    390          //	tempC = AverageData(adc_data1, ADC_CH_DATA_LEN);
    391          #endif
    392          	
    393          	// Diagnostic BOOST	
    394          	//
    395          //	DelayMs(100);
    396          	//
    397          	//
    398          		
    399          #if (CRC_ENABLE == 1)
    400          	// Check CS of Memory
    401          	DeviceFault.fFaultCRC = 0;
    402          	if (GetPropertiesCS() != CONFIG->CS) {
    403          		DeviceFault.fFaultCRC = 1;
    404          	}
    405          #endif
    406          }
    407          
    408          //--------------------------------------------------------------------------------
    409          // Function		: void u8 JP1_Define(void)
    410          // Parameters	: None
    411          // Return		: 0 - JP1 Open, 1 - JP1 Close
    412          // Description	: Definition of JP1 state
    413          //--------------------------------------------------------------------------------
    414          void JP1_Define(void) {
    415          /*	u16 buf[4];
    416          	u16 res;
    417          	
    418          	res = ADC_Measure_Simple(ADC_BUT, buf, 4);
    419          	
    420          	if (res > 600) return; 
    421          	if (res > 100) {
    422          		jp1_state = 0;		// JP1 is Open 
    423          	}else{
    424          		jp1_state = 1;		// JP1 is Close
    425          	}	
    426          */
    427                  
    428          	return;	
    429          }
    430          
    431          
    432          // End of main.c

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   ADC10_ISR
      2   DeviceDiagnostics
        2   -> GetPropertiesCS
      2   DeviceStart
        0   -> VLO_TimerCalibr
      2   JP1_Define
      2   LedValueManager
      4   Led_Flash
        4   -> DelayMs
      2   main
        2   -> DelayMs
        2   -> DeviceStart
        2   -> GPIO_Init
        2   -> Led_Flash
        2   -> SysTimerInit
      4   watchdog_timer


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for timerA1_blank>
      10  ADC10_ISR
       2  ADC10_ISR::??INTVEC 10
       1  BCSCTL1
       1  BCSCTL3
       1  CALBC1_1MHZ
       1  CALDCO_1MHZ
       1  DCOCTL
      24  DeviceDiagnostics
       1  DeviceFault
       1  DeviceMode
       8  DeviceStart
       1  IE1
       1  IFG1
       2  JP1_Define
       2  LedValueManager
      30  Led_Flash
       1  P1OUT
       1  Timer50msCounter
       2  WDTCTL
       1  adc_process
       2  cfg_reg
       2  f
       1  fTimerA1_On
       1  jp1_state
       4  led_r
       4  led_sh
       4  led_y
       1  light_sync
       2  light_timer
     172  main
       2  mainPeriodCounter
       1  reference
       2  tempC
       1  timerA1_blank
       2  timerMain
      12  watchdog_timer
       2  watchdog_timer::??INTVEC 20

 
 260 bytes in segment CODE
  10 bytes in segment DATA16_AN
   1 byte  in segment DATA16_I
   1 byte  in segment DATA16_ID
  30 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
   2 bytes in segment REGVAR_AN
 
 260 bytes of CODE     memory
   1 byte  of CONST    memory (+  4 bytes shared)
  31 bytes of DATA     memory (+ 10 bytes shared)
   0 bytes of REGISTER memory (+  2 bytes shared)

Errors: none
Warnings: none
