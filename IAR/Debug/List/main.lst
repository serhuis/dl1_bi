###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           07/Mar/2017  16:05:39
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  regvar
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c
#    Command line  =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c -lcN
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\List -o
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\Obj --debug
#        -D__MSP430G2332__ -e --double=32 --regvar_r4 --dlib_config "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430fn.h"
#        -I ..\ -I .\ -Oh
#    List file     =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\List\main.lst
#    Object file   =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\Obj\main.r43
#
###############################################################################

E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c
      1          /**********************************************************************************
      2           *
      3           *      ASD-10QR MAIN routine
      4           * 
      5           **********************************************************************************
      6           * FileName:        main.c
      7           * Version:			1.00
      8           *
      9           * Processor:       MSP430G2xxx
     10           * Complier:        IAR Workbench for MSP430 v4.50 or higher
     11           *                  
     12           * Company:         ARTON
     13           *
     14           * Software License Agreement
     15           *
     16           * The software supplied herewith by ARTON Incorporated
     17           * (the "Company") for its devices is intended and
     18           * supplied to you, the Company's customer, for use solely and
     19           * exclusively on ARTON Inc products. The
     20           * software is owned by the Company and/or its Author, and is
     21           * protected under applicable copyright laws. All rights are reserved.
     22           * Any use in violation of the foregoing restrictions may subject the
     23           * user to criminal sanctions under applicable laws, as well as to
     24           * civil liability for the breach of the terms and conditions of this
     25           * license.
     26           *
     27           * THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION. NO WARRANTIES,
     28           * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
     29           * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
     30           * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
     31           * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
     32           * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
     33           *
     34           *
     35           * Author               Date      	Version	  		Comment
     36           *--------------------------------------------------------------------------------
     37           * Oleg Semeniuk	 16.01.2014    	1.00		Release for v1.00
     38           *
     39           *********************************************************************************/
     40          
     41          
     42          /*********************************************************************************/
     43          /*                                 INCLUDES                                      */
     44          /*********************************************************************************/
     45          
     46          
     47          #include <stdio.h>                    /* standard I/O .h-file                */
     48          #include <string.h>                   /* string and memory functions         */
     49          
     50          
     51          #include  "main.h"
     52          
     53          
     54          
     55          /*********************************************************************************/
     56          /*                                 VARIABLES                                     */
     57          /*********************************************************************************/
     58          
     59          __regvar __no_init tFlags 	f 	 @ __R4; 	// Set of state machine flags
     60          
     61          //
     62          u16		timerMain;					// Текущее значение главного таймера
     63          u16		mainPeriodCounter;			// Counter of main time period
     64          u8 		DeviceMode; 				// Mode of device
     65          
     66          tFault	DeviceFault = {0};			// Current Faults flags
     67          u16		tempC;						// Current temperature in deg C
     68          
     69          u8 		Timer50msCounter = 0;		// Counter of 50ms ticks
     70          
     71          volatile u32	led_r;
     72          volatile u32	led_y;
     73          volatile u32	led_sh = 0;
     74          
     75          u8 		fTimerA1_On = 0;
     76          
     77          //const u8 fault_sequence[4 * 2] = {MODE_FAULT, 10, MODE_NORM, 5, MODE_FIRE, 0, 0};	// 0 = ~~
     78          
     79          u8	reference;
     80          tCfgReg	cfg_reg;
     81          
     82          u8	jp1_state = 0;	// 0 - JP1 Open, 1 - JP1 Close
     83          
     84          u8	adc_process = 0;		// ADC low level semafore
     85          
     86          u16	light_timer = 0;	// For led lighting
     87          
     88          u8	light_sync = 0;		// For led lighting syncronisation
     89          
     90          
     91          /*********************************************************************************/
     92          /*                                FUNCTIONS                                      */
     93          /*********************************************************************************/
     94          // --- Declarations ---
     95          
     96          //u16  AverageData(u16 * data_ptr, u8 len);
     97          //u8   RX_PacketParser(void);
     98          //void ADC_Measure(u16 ch, u16 refout, u8 count);
     99          //void ADC_Measure_TEMP(u16 ch, u16 refout, u8 count);
    100          
    101          
    102          void JP1_Define(void);
    103          
    104          
    105          
    106          
    107          //--------------------------------------------------------------------------------
    108          // Function		: void DeviceStart(void)
    109          // Parameters	: None
    110          // Return		: None
    111          // Description	: Function executes initialization variable at start of device
    112          //--------------------------------------------------------------------------------
    113          void DeviceStart(void) {
    114          
    115          	DeviceFault.byte = 0;		// Reset faults flags
    116          	//		
    117          	VLO_TimerCalibr();			// Calibration VLO Timer
    118          	//
    119          }
    120          
    121          
    122          //--------------------------------------------------------------------------------
    123          // Function		: void LedValueManager(void)
    124          // Parameters	: None
    125          // Return		: None
    126          // Description	: 
    127          //--------------------------------------------------------------------------------
    128          void LedValueManager(void) {
    129            /*
    130          	if (DeviceFault.byte) {
    131          		DeviceMode = MODE_FAULT;
    132          		led_r = 0;
    133          		
    134          		if (DeviceFault.fELStrobNone) {
    135          			// Electrical sync is fault
    136          			led_y = LED_PULSE_3;
    137          		}else
    138          		if (DeviceFault.fSignal_Hi) {
    139          			// Level signal is big
    140          			led_y = LED_PULSE_2;
    141          		}else
    142          		if (DeviceFault.fSignal_Low) {
    143          			// Level signal is big
    144          			led_y = LED_PULSE_1;
    145          		}else	
    146          		if (DeviceFault.fFaultDrift) {
    147          			// Level signal is big
    148          			led_y = LED_PULSE_4;
    149          		}
    150          	}else{
    151          		if (DeviceMode == MODE_FAULT) {
    152          			DeviceMode = MODE_NORM;
    153          			led_r = 0;
    154          			led_y = 0;
    155          		}
    156          	}
    157            */
    158          }
    159          
    160          //========================================================
    161          //                 ---  M A I N  ----
    162          //========================================================
    163          //--------------------------------------------------------------------------------
    164          // Function		: void main(void)
    165          // Parameters	: None
    166          // Return		: None
    167          // Description	: Main function. Contains main loop.
    168          //--------------------------------------------------------------------------------
    169          void main(void) {
    170          	u8	led_clk;
    171          	u16	led_timer = 0;
    172          	// Initialization variables and GPIO
    173          	
    174          	WDTCTL = WDTPW + WDTHOLD;				// отключаем сторожевой таймер
    175          
    176          	// GIPIO Init
    177          	GPIO_Init();
    178          		
    179          	// Init internal RC osc.
    180          	BCSCTL1 = CALBC1_1MHZ; 					// Используем частоту 1 MГц
    181          	DCOCTL =  CALDCO_1MHZ;
    182          	
    183          	DelayMs(500);
    184          	
    185          	// Initialization code for VLO
    186          	__set_R4_register(0);
    187          	//
    188          	BCSCTL3 |= LFXT1S_2;                    // Select VLO as low freq clock
    189          	// End initialization code
    190          	
    191          	WDTCTL = WDT_ADLY_250;                   // Interval timer	/* for 50 ms */
    192          	//WDTCTL = WDT_ADLY_1_9;                   // Interval timer	/* for 5.9 ms */
    193          	IE1 |= WDTIE;                           // Enable WDT interrupt
    194          	//
    195          	fLPM3 = 1;								// Enable LOW power mode
    196          	//
    197          	if (IFG1 & WDTIFG) {
    198          		// Reset WDT
    199          		#if (SYS_FAULT_ENABLE == 1)
    200          		DeviceFault.fFaultSWReset = 1;
    201          		#endif
    202          	}
    203          	IFG1 = 0;
    204          	//	
    205          	DeviceMode = MODE_NORM;
    206          	
    207          	//!!!!
    208          //	TEST2_DIR |= TEST2_BIT;
    209          
    210          	DelayMs(1000);
    211          	
    212          	Led_Flash(5);
    213          	DelayMs(300);
    214          	Led_Flash(5);
    215          	
    216          	DelayMs(3000);
    217          	
    218          	_BIS_SR(GIE);    					// Interrupt enable
    219          	DeviceStart();
    220          
    221          	cfg_reg = CONFIG->config_reg;
    222          	
    223          	Timer_A0_Init();
    224          	
    225          	
    226          // *****************************************************************
    227          // ******************   M A I N   L O O P  *************************
    228          // *****************************************************************
    229          	while(1) {
    230          //-------------------------------------------------------------------------------
    231          		//
    232          		// ******** Обработчики событий ********
    233          		//
    234          //-------------------------------------------------------------------------------
    235          		
    236          //-------------------------------------------------------------------------------
    237          // TimerA0 Event		
    238          //-------------------------------------------------------------------------------
    239          		if (fTimerA_On) {				// Получен следующий интервал timer
    240          			fTimerA_On = 0;
    241          /*			
    242          			BCSCTL1 = CALBC1_16MHZ; 					// Используем частоту 8 MГц
    243          			DCOCTL =  CALDCO_16MHZ;
    244          			//
    245          			TA1CCR0  = 16 * SYS_TICK_TIME - 1;   	// Period T(us) * F(MHz)
    246          			//
    247          			
    248          			_BIC_SR(GIE);    			// Запрещаем прерывания
    249          			Timer_A_Off();
    250          			_BIS_SR(GIE);    			// Разрешаем прерывания
    251          			
    252          			//TEST2_CLR();
    253          			
    254          			timerA1_blank = 4;
    255          */			
    256          		}
    257          
    258          //-------------------------------------------------------------------------------
    259          // fTimer50msOn Event				
    260          //-------------------------------------------------------------------------------
    261          		if (fTimer50msOn) {		// Получен следующий 50мс интервал
    262          			fTimer50msOn = 0;
    263          			//
    264          			Timer50msCounter = 0;
    265          		}
    266          		
    267          //-------------------------------------------------------------------------------
    268          // TimerA1 Event (SysTick)
    269          //-------------------------------------------------------------------------------
    270          		if (fTimerA1_On) {				// Получен следующий интервал timer
    271          			fTimerA1_On = 0;
    272          			
    273          			//TEST2_CLR();
    274          			//TEST2_OUT ^= TEST2_BIT;
    275          			
    276          			//
    277          			if (timerMain) {
    278          				timerMain--;
    279          				if (timerMain == 1) {
    280          					if (DeviceMode == MODE_TEST) {
    281          						DeviceMode = MODE_NORM;
    282          						RED_CLR();
    283          						YEL_CLR();
    284          					}
    285          				}
    286          			}
    287          
    288          	/*		
    289          			if (timerA1_blank) {
    290          				timerA1_blank--;
    291          			}else{
    292          
    293          				// Indication
    294          				//
    295          				if (light_timer) {
    296          					if ((DeviceMode == MODE_NORM) || (DeviceMode == MODE_PREFIRE)) {
    297          						RED_SET();
    298          						YEL_CLR();
    299          					}else
    300          					//
    301          					if (DeviceMode == MODE_CALIBR) {
    302          						RED_SET();
    303          						YEL_SET();
    304          					}
    305          					//
    306          					light_timer--;
    307          				}else{
    308          					//
    309          					if ((DeviceMode == MODE_NORM) || (DeviceMode == MODE_CALIBR) || (DeviceMode == MODE_PREFIRE)) {
    310          						RED_CLR();
    311          						YEL_CLR();
    312          					}
    313          				}
    314          
    315          			} // End indication
    316          			//
    317          */
    318          			
    319          		} // if (fTimer50msOn)
    320          
    321          	} // while(1)
    322          }
    323          
    324          
    325          //--------------------------------------------------------------------------------
    326          // Function		: __interrupt void watchdog_timer (void)
    327          // Parameters	: None
    328          // Return		: None
    329          // Description	: WDT Interrupt routine
    330          //--------------------------------------------------------------------------------
    331          #pragma vector=WDT_VECTOR
    332          __interrupt void watchdog_timer (void) {
    333          	
    334          	if (fTimer50msOn) {
    335          		if (++Timer50msCounter == 0) {		// > ~ 12sec
    336          			//!!!WDTCTL = WDTCTL;				// Hardware RESET
    337          		}
    338          	}
    339          	fTimer50msOn = 1;
    340          	
    341          	__bic_SR_register_on_exit(LPM3_bits);                   // Clear LPM3 bits from 0(SR)
    342          }
    343          
    344          
    345          
    346          
    347          
    348          
    349          
    350          
    351          //--------------------------------------------------------------------------------
    352          // Function		: void Led_Flash(u16 duration)
    353          // Parameters	: duration - duration Red LED flash in ms
    354          // Return		: None
    355          // Description	: Flashing red LED
    356          //--------------------------------------------------------------------------------
    357          void Led_Flash(u16 duration) {
    358          	RED_SET();
    359          	DelayMs(duration);
    360          	RED_CLR();
    361          }
    362          
    363          
    364          
    365          
    366          
    367          //--------------------------------------------------------------------------------
    368          // Function		: u16 GetVCC(u8 boost_stop)
    369          // Parameters	: boost_stop = 1 - if need call BoostStop() after measure
    370          // Return		: Value in 10mV (for example 250 = 2.50V)
    371          // Description	: Measurement the voltage VCC
    372          //--------------------------------------------------------------------------------
    373          u16 GetVCC(u8 boost_stop) {
    374          
    375                  u16 res=0;	
    376          /*	ADC_Measure(ADC_CH_VCC, 0, VCC_DATA_LEN);
    377          	//~~~
    378          	VREF_Off();
    379          	//
    380          	//	
    381          //	res = AverageData(adc_data1, VCC_DATA_LEN);
    382          	res = res * 64 / 218 + 2;						//~~res = ((u32)res * 301) / 1024 & Compensation dV(R38)=20mV (max=302)
    383          */
    384          	return (res);			
    385          }
    386          
    387          //--------------------------------------------------------------------------------
    388          // Function		: void ADC10_ISR(void)
    389          // Parameters	: None
    390          // Return		: None
    391          // Description	: ADC10 interrupt service routine
    392          //--------------------------------------------------------------------------------
    393          #pragma vector=ADC10_VECTOR
    394          __interrupt void ADC10_ISR(void) {
    395          
    396          	//ADC10AE0 &= ~0x0F;                      // Save only VRef Out
    397          	adc_process = 0;
    398          	fEndOfSamples = 1;
    399          	
    400          	//__bic_SR_register_on_exit(CPUOFF);      // Clear CPUOFF bit from 0(SR)
    401          	
    402          }
    403          
    404          //--------------------------------------------------------------------------------
    405          // Function		: void DeviceDiagnostics(void)
    406          // Parameters	: None
    407          // Return		: None
    408          // Description	: Procedure of the diagnostics device
    409          //--------------------------------------------------------------------------------
    410          void DeviceDiagnostics(void) {
    411          	
    412          	//
    413          #if (TEMP_DET_ENABLE == 1)
    414          //	ADC_Measure_TEMP(ADC_CH_TEMP, REFOUT, ADC_CH_DATA_LEN);
    415          //	tempC = AverageData(adc_data1, ADC_CH_DATA_LEN);
    416          #endif
    417          	
    418          	// Diagnostic BOOST	
    419          	//
    420          //	DelayMs(100);
    421          	//
    422          	//
    423          		
    424          #if (CRC_ENABLE == 1)
    425          	// Check CS of Memory
    426          	DeviceFault.fFaultCRC = 0;
    427          	if (GetPropertiesCS() != CONFIG->CS) {
    428          		DeviceFault.fFaultCRC = 1;
    429          	}
    430          #endif
    431          }
    432          
    433          //--------------------------------------------------------------------------------
    434          // Function		: void u8 JP1_Define(void)
    435          // Parameters	: None
    436          // Return		: 0 - JP1 Open, 1 - JP1 Close
    437          // Description	: Definition of JP1 state
    438          //--------------------------------------------------------------------------------
    439          void JP1_Define(void) {
    440          /*	u16 buf[4];
    441          	u16 res;
    442          	
    443          	res = ADC_Measure_Simple(ADC_BUT, buf, 4);
    444          	
    445          	if (res > 600) return; 
    446          	if (res > 100) {
    447          		jp1_state = 0;		// JP1 is Open 
    448          	}else{
    449          		jp1_state = 1;		// JP1 is Close
    450          	}	
    451          */
    452                  
    453          	return;	
    454          }
    455          
    456          
    457          // End of main.c

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   ADC10_ISR
      2   DeviceDiagnostics
        2   -> GetPropertiesCS
      2   DeviceStart
        0   -> VLO_TimerCalibr
      2   GetVCC
      2   JP1_Define
      2   LedValueManager
      2   Led_Flash
        2   -> DelayMs
      2   main
        2   -> DelayMs
        4   -> DelayMs
        2   -> GPIO_Init
        2   -> Timer_A0_Init
        2   -> VLO_TimerCalibr
      4   watchdog_timer


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      22  ?Subroutine0
      10  ADC10_ISR
       2  ADC10_ISR::??INTVEC 10
       1  BCSCTL1
       1  BCSCTL3
       1  CALBC1_1MHZ
       1  CALDCO_1MHZ
       1  DCOCTL
      24  DeviceDiagnostics
       1  DeviceFault
       1  DeviceMode
       8  DeviceStart
       4  GetVCC
       1  IE1
       1  IFG1
       2  JP1_Define
       2  LedValueManager
      18  Led_Flash
       1  P1OUT
       1  P2OUT
       1  Timer50msCounter
       2  WDTCTL
       1  adc_process
       2  cfg_reg
       2  f
       1  fTimerA1_On
       1  jp1_state
       4  led_r
       4  led_sh
       4  led_y
       1  light_sync
       2  light_timer
     178  main
       2  mainPeriodCounter
       1  reference
       2  tempC
       2  timerMain
      18  watchdog_timer
       2  watchdog_timer::??INTVEC 20

 
 286 bytes in segment CODE
  11 bytes in segment DATA16_AN
  30 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
   2 bytes in segment REGVAR_AN
 
 286 bytes of CODE     memory
   0 bytes of CONST    memory (+  4 bytes shared)
  30 bytes of DATA     memory (+ 11 bytes shared)
   0 bytes of REGISTER memory (+  2 bytes shared)

Errors: none
Warnings: 2
