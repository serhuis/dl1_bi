###############################################################################
#
# IAR C/C++ Compiler V6.40.1.950/W32 for MSP430           16/Mar/2017  18:01:48
# Copyright 1996-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for Texas Instruments MSP430
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  regvar
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430
#    Source file   =  E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c
#    Command line  =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c -lcN
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\List -o
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\Obj --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        -D__MSP430G2332__ -e --double=32 --regvar_r4 --dlib_config "C:\Program
#        Files (x86)\IAR Systems\Embedded Workbench 7.3\430\lib\dlib\dl430fn.h"
#        -I ..\ -I .\ -On
#    List file     =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\List\main.lst
#    Object file   =  
#        E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\IAR\Debug\Obj\main.r43
#
###############################################################################

E:\_ARTON_PROJ\Arton-DL1-R\BI\soft\git\main.c
      1          /**********************************************************************************
      2           *
      3           *      ASD-10QR MAIN routine
      4           * 
      5           **********************************************************************************
      6           * FileName:        main.c
      7           * Version:			1.00
      8           *
      9           * Processor:       MSP430G2xxx
     10           * Complier:        IAR Workbench for MSP430 v4.50 or higher
     11           *                  
     12           * Company:         ARTON
     13           *
     14           * Software License Agreement
     15           *
     16           * The software supplied herewith by ARTON Incorporated
     17           * (the "Company") for its devices is intended and
     18           * supplied to you, the Company's customer, for use solely and
     19           * exclusively on ARTON Inc products. The
     20           * software is owned by the Company and/or its Author, and is
     21           * protected under applicable copyright laws. All rights are reserved.
     22           * Any use in violation of the foregoing restrictions may subject the
     23           * user to criminal sanctions under applicable laws, as well as to
     24           * civil liability for the breach of the terms and conditions of this
     25           * license.
     26           *
     27           * THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION. NO WARRANTIES,
     28           * WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
     29           * TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
     30           * PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
     31           * IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
     32           * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
     33           *
     34           *
     35           * Author               Date      	Version	  		Comment
     36           *--------------------------------------------------------------------------------
     37           * Oleg Semeniuk	 16.01.2014    	1.00		Release for v1.00
     38           *
     39           *********************************************************************************/
     40          
     41          
     42          /*********************************************************************************/
     43          /*                                 INCLUDES                                      */
     44          /*********************************************************************************/
     45          
     46          
     47          #include <stdio.h>                    /* standard I/O .h-file                */
     48          #include <string.h>                   /* string and memory functions         */
     49          
     50          
     51          #include  "main.h"
     52          
     53          
     54          
     55          /*********************************************************************************/
     56          /*                                 VARIABLES                                     */
     57          /*********************************************************************************/
     58          
     59          __regvar __no_init tFlags 	f 	 @ __R4; 	// Set of state machine flags
     60          
     61          //
     62          u16		timerMain;					// Текущее значение главного таймера
     63          u16		mainPeriodCounter;			// Counter of main time period
     64          u8 		DeviceMode; 				// Mode of device
     65          
     66          tFault	DeviceFault = {0};			// Current Faults flags
     67          
     68          u8 		Timer50msCounter = 0;		// Counter of 50ms ticks
     69          /*
     70          volatile u32	led_r;
     71          volatile u32	led_y;
     72          volatile u32	led_sh = 0;
     73          */
     74          u8 		fTimerA1_On = 0;
     75          u8 		timerA1_blank = 0;
     76          tCfgReg	cfg_reg;
     77          u8	jp1_state = 0;	// 0 - JP1 Open, 1 - JP1 Close
     78          
     79          u8	adc_process = 0;		// ADC low level semafore
     80          u16	light_timer = 1;	// For led lighting
     81          
     82          u8	sync_timer = SYNC_PERIOD;		// For led lighting syncronisation
     83          u8	ir_timer  = IR_TIMEOUT;
     84          
     85          /*********************************************************************************/
     86          /*                                FUNCTIONS                                      */
     87          /*********************************************************************************/
     88          // --- Declarations ---
     89          
     90          //u16  AverageData(u16 * data_ptr, u8 len);
     91          //u8   RX_PacketParser(void);
     92          //void ADC_Measure(u16 ch, u16 refout, u8 count);
     93          //void ADC_Measure_TEMP(u16 ch, u16 refout, u8 count);
     94          
     95          
     96          void JP1_Define(void);
     97          
     98          
     99          
    100          
    101          //--------------------------------------------------------------------------------
    102          // Function		: void DeviceStart(void)
    103          // Parameters	: None
    104          // Return		: None
    105          // Description	: Function executes initialization variable at start of device
    106          //--------------------------------------------------------------------------------
    107          void DeviceStart(void) {
    108          
    109          	DeviceFault.byte = 0;		// Reset faults flags
    110          	//		
    111          	VLO_TimerCalibr();			// Calibration VLO Timer
    112          	//
    113          }
    114          
    115          
    116          //--------------------------------------------------------------------------------
    117          // Function		: void LedValueManager(void)
    118          // Parameters	: None
    119          // Return		: None
    120          // Description	: 
    121          //--------------------------------------------------------------------------------
    122          void LedValueManager(void) {
    123            /*
    124          	if (DeviceFault.byte) {
    125          		DeviceMode = MODE_FAULT;
    126          		led_r = 0;
    127          		
    128          		if (DeviceFault.fELStrobNone) {
    129          			// Electrical sync is fault
    130          			led_y = LED_PULSE_3;
    131          		}else
    132          		if (DeviceFault.fSignal_Hi) {
    133          			// Level signal is big
    134          			led_y = LED_PULSE_2;
    135          		}else
    136          		if (DeviceFault.fSignal_Low) {
    137          			// Level signal is big
    138          			led_y = LED_PULSE_1;
    139          		}else	
    140          		if (DeviceFault.fFaultDrift) {
    141          			// Level signal is big
    142          			led_y = LED_PULSE_4;
    143          		}
    144          	}else{
    145          		if (DeviceMode == MODE_FAULT) {
    146          			DeviceMode = MODE_NORM;
    147          			led_r = 0;
    148          			led_y = 0;
    149          		}
    150          	}
    151            */
    152          }
    153          
    154          //========================================================
    155          //                 ---  M A I N  ----
    156          //========================================================
    157          //--------------------------------------------------------------------------------
    158          // Function		: void main(void)
    159          // Parameters	: None
    160          // Return		: None
    161          // Description	: Main function. Contains main loop.
    162          //--------------------------------------------------------------------------------
    163          void main(void) {
    164          	u8	ir_num;
    165          //	u16	led_timer = 0;
    166          	// Initialization variables and GPIO
    167          	
    168          	WDTCTL = WDTPW + WDTHOLD;				// отключаем сторожевой таймер
    169          	
    170          	BCSCTL1 = CALBC1_1MHZ; 						// Init internal RC osc.
    171          	DCOCTL =  CALDCO_1MHZ;						// Используем частоту 1 MГц0.
    172          	__set_R4_register(0);							
    173          	
    174          	// Initialization code for VLO
    175          	BCSCTL3 |= LFXT1S_2;                    // Select VLO for low freq clock, capacitor off
    176          	
    177          	WDTCTL = WDT_ADLY_1000;                   	// Interval timer	/* for 1000 ms */
    178          	IE1 |= WDTIE|NMIIE;                           	// Enable WDT interrupt
    179          	_BIS_SR(GIE);    					// Interrupt enable
    180          	
    181          	__bis_SR_register(LPM1_bits);
    182          		
    183          	WDTCTL = WDTPW + WDTHOLD;				// отключаем сторожевой таймер	
    184          		_BIC_SR(GIE);	
    185          
    186          	IFG1 = 0;												//clear global interrupt flag
    187          
    188          	GPIO_Init();										// GIPIO Init
    189          	DeviceStart();									// Calibration VLO Timer
    190          	SysTimerInit();
    191          	
    192          	Led_Flash(10);
    193          	DelayMs(200);
    194          	Led_Flash(10);
    195          
    196          		_BIS_SR(GIE);    					// Interrupt enable
    197          
    198          //	__bis_SR_register(LPM1_bits);
    199          
    200          	
    201          // *****************************************************************
    202          // ******************   M A I N   L O O P  *************************
    203          // *****************************************************************
    204          	while(1) {
    205          //-------------------------------------------------------------------------------
    206          		//
    207          		// ******** Обработчики событий ********
    208          		//
    209          //-------------------------------------------------------------------------------
    210          		
    211          //-------------------------------------------------------------------------------
    212          // old TimerA0 Event		
    213          //-------------------------------------------------------------------------------
    214          /*
    215          		if (fTimerA_On) {				// Получен следующий интервал timer
    216          			fTimerA_On = 0;
    217          			
    218          			BCSCTL1 = CALBC1_16MHZ; 					// Используем частоту 8 MГц
    219          			DCOCTL =  CALDCO_16MHZ;
    220          			//
    221          			TA1CCR0  = 16 * SYS_TICK_TIME - 1;   	// Period T(us) * F(MHz)
    222          			//
    223          			
    224          			_BIC_SR(GIE);    			// Запрещаем прерывания
    225          			Timer_A_Off();
    226          			_BIS_SR(GIE);    			// Разрешаем прерывания
    227          			
    228          			//TEST2_CLR();
    229          			
    230          			timerA1_blank = 4;
    231          			
    232          		}
    233          */
    234          //-------------------------------------------------------------------------------
    235          // fTimer50msOn Event				
    236          //-------------------------------------------------------------------------------
    237          		if (fTimer50msOn) {		// Получен следующий 50мс интервал
    238          			fTimer50msOn = 0;
    239          			//
    240          			Timer50msCounter = 0;
    241          
    242          		}
    243          		
    244          //-------------------------------------------------------------------------------
    245          // fIrTimerOn Event				
    246          //-------------------------------------------------------------------------------
    247          		if(fIrTimerOn)
    248          			{
    249          //				if(ir_timer--);
    250          //				else
    251          //				{
    252          
    253          					fIrTimerOn = 0;
    254          					for(ir_num = 0; ir_num < IR_PULSES; ir_num++)
    255          					{
    256          //						IRED_SET();
    257          						IR_SYNC_SET();
    258          						DelayUs(IR_DUTY);
    259          //						IRED_CLR();
    260          IR_SYNC_CLR();
    261          						DelayUs(IR_PAUSE);
    262          					}
    263          					LPM0;
    264          			}
    265          		
    266          		
    267          //-------------------------------------------------------------------------------
    268          // TimerA0 SysTick
    269          //-------------------------------------------------------------------------------
    270          		
    271          		if (fTimerA_On) {				// Получен следующий интервал timer
    272          			fTimerA_On = 0;
    273          			
    274          			if(sync_timer--)
    275          			{
    276          				fStartPulse = 0;
    277          			}
    278          			else
    279          			{
    280          				fStartPulse = 1;					//enable sync pulse
    281          				sync_timer = SYNC_PERIOD;
    282          			}
    283          			
    284          			if(fStartPulse)
    285          			{
    286          				fStartPulse =0;
    287          				
    288          
    289          				LN_SYNC_SET();	
    290          				DelayUs(100);
    291          				LN_SYNC_CLR();
    292          				
    293          //				ir_timer  = IR_TIMEOUT;
    294          				T0_delay();
    295          			}
    296          	
    297          			
    298          //	Indication update			
    299          			RED_CLR();
    300          			YEL_CLR();			
    301          			if (timerA1_blank) 
    302          			{
    303          				timerA1_blank--;
    304          			}
    305          			else
    306          			{
    307          				timerA1_blank = 50;
    308          
    309          				// Indication
    310          				//
    311          				if (light_timer--) 
    312          				{
    313          						RED_SET();
    314          				}
    315          				else
    316          				{
    317          					light_timer = 1;
    318          						RED_CLR();
    319          						YEL_CLR();
    320          				}
    321          			}
    322          
    323          //	end of Indication update
    324          		}//fTimerA_On
    325          
    326          	} // while(1)
    327          }//main
    328          
    329          
    330          //--------------------------------------------------------------------------------
    331          // Function		: __interrupt void watchdog_timer (void)
    332          // Parameters	: None
    333          // Return		: None
    334          // Description	: WDT Interrupt routine
    335          //--------------------------------------------------------------------------------
    336          #pragma vector=WDT_VECTOR
    337          __interrupt void watchdog_timer (void) {
    338          	
    339          	if (fTimer50msOn) {
    340          		if (++Timer50msCounter == 0) {		// > ~ 12sec
    341          			//!!!WDTCTL = WDTCTL;				// Hardware RESET
    342          		}
    343          	}
    344          	fTimer50msOn = 1;
    345          	
    346          
    347          	
    348          	__bic_SR_register_on_exit(LPM1_bits);                   // Clear LPM3 bits from 0(SR)
    349          }
    350          
    351          
    352          
    353          
    354          //--------------------------------------------------------------------------------
    355          // Function		: void Led_Flash(u16 duration)
    356          // Parameters	: duration - duration Red LED flash in ms
    357          // Return		: None
    358          // Description	: Flashing red LED
    359          //--------------------------------------------------------------------------------
    360          void Led_Flash(u16 duration) {
    361          	RED_SET();
    362          	DelayMs(duration);
    363          	RED_CLR();
    364          }
    365          
    366          //--------------------------------------------------------------------------------
    367          // Function		: void ADC10_ISR(void)
    368          // Parameters	: None
    369          // Return		: None
    370          // Description	: ADC10 interrupt service routine
    371          //--------------------------------------------------------------------------------
    372          #pragma vector=ADC10_VECTOR
    373          __interrupt void ADC10_ISR(void) {
    374          
    375          	//ADC10AE0 &= ~0x0F;                      // Save only VRef Out
    376          	//adc_process = 0;
    377          	//fEndOfSamples = 1;
    378          	
    379          	//__bic_SR_register_on_exit(CPUOFF);      // Clear CPUOFF bit from 0(SR)
    380          	
    381          }
    382          
    383          //--------------------------------------------------------------------------------
    384          // Function		: void DeviceDiagnostics(void)
    385          // Parameters	: None
    386          // Return		: None
    387          // Description	: Procedure of the diagnostics device
    388          //--------------------------------------------------------------------------------
    389          void DeviceDiagnostics(void) {
    390          	
    391          	//
    392          #if (TEMP_DET_ENABLE == 1)
    393          //	ADC_Measure_TEMP(ADC_CH_TEMP, REFOUT, ADC_CH_DATA_LEN);
    394          //	tempC = AverageData(adc_data1, ADC_CH_DATA_LEN);
    395          #endif
    396          	
    397          	// Diagnostic BOOST	
    398          	//
    399          //	DelayMs(100);
    400          	//
    401          	//
    402          		
    403          #if (CRC_ENABLE == 1)
    404          	// Check CS of Memory
    405          	DeviceFault.fFaultCRC = 0;
    406          	if (GetPropertiesCS() != CONFIG->CS) {
    407          		DeviceFault.fFaultCRC = 1;
    408          	}
    409          #endif
    410          }
    411          
    412          //--------------------------------------------------------------------------------
    413          // Function		: void u8 JP1_Define(void)
    414          // Parameters	: None
    415          // Return		: 0 - JP1 Open, 1 - JP1 Close
    416          // Description	: Definition of JP1 state
    417          //--------------------------------------------------------------------------------
    418          void JP1_Define(void) {
    419          /*	u16 buf[4];
    420          	u16 res;
    421          	
    422          	res = ADC_Measure_Simple(ADC_BUT, buf, 4);
    423          	
    424          	if (res > 600) return; 
    425          	if (res > 100) {
    426          		jp1_state = 0;		// JP1 is Open 
    427          	}else{
    428          		jp1_state = 1;		// JP1 is Close
    429          	}	
    430          */
    431                  
    432          	return;	
    433          }
    434          
    435          
    436          // End of main.c

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   ADC10_ISR
      2   DeviceDiagnostics
        2   -> GetPropertiesCS
      2   DeviceStart
        0   -> VLO_TimerCalibr
      2   JP1_Define
      2   LedValueManager
      4   Led_Flash
        4   -> DelayMs
      2   main
        2   -> DelayMs
        2   -> DelayUs
        2   -> DeviceStart
        2   -> GPIO_Init
        2   -> Led_Flash
        2   -> SysTimerInit
        2   -> T0_delay
      4   watchdog_timer


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for ir_timer>
       2  ?<Initializer for light_timer>
       1  ?<Initializer for sync_timer>
       2  ADC10_ISR
       2  ADC10_ISR::??INTVEC 10
       1  BCSCTL1
       1  BCSCTL3
       1  CALBC1_1MHZ
       1  CALDCO_1MHZ
       1  DCOCTL
      24  DeviceDiagnostics
       1  DeviceFault
       1  DeviceMode
       8  DeviceStart
       1  IE1
       1  IFG1
       2  JP1_Define
       2  LedValueManager
      22  Led_Flash
       1  P1OUT
       1  Timer50msCounter
       2  WDTCTL
       1  adc_process
       2  cfg_reg
       2  f
       1  fTimerA1_On
       1  ir_timer
       1  jp1_state
       2  light_timer
     320  main
       2  mainPeriodCounter
       1  sync_timer
       1  timerA1_blank
       2  timerMain
      18  watchdog_timer
       2  watchdog_timer::??INTVEC 20

 
 398 bytes in segment CODE
  10 bytes in segment DATA16_AN
   4 bytes in segment DATA16_I
   4 bytes in segment DATA16_ID
  13 bytes in segment DATA16_Z
   4 bytes in segment INTVEC
   2 bytes in segment REGVAR_AN
 
 398 bytes of CODE     memory
   4 bytes of CONST    memory (+  4 bytes shared)
  17 bytes of DATA     memory (+ 10 bytes shared)
   0 bytes of REGISTER memory (+  2 bytes shared)

Errors: none
Warnings: 1
